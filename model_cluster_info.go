/*
Kafka Connect REST API

Kafka Connect REST API https://docs.confluent.io/platform/current/connect/references/restapi.html

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ClusterInfo struct for ClusterInfo
type ClusterInfo struct {
	// Connect worker version.
	Version *string `json:"version,omitempty"`
	// git commit ID.
	Commit *string `json:"commit,omitempty"`
	// Kafka cluster ID.
	KafkaClusterId *string `json:"kafka_cluster_id,omitempty"`
}

// NewClusterInfo instantiates a new ClusterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterInfo() *ClusterInfo {
	this := ClusterInfo{}
	return &this
}

// NewClusterInfoWithDefaults instantiates a new ClusterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterInfoWithDefaults() *ClusterInfo {
	this := ClusterInfo{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ClusterInfo) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfo) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ClusterInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ClusterInfo) SetVersion(v string) {
	o.Version = &v
}

// GetCommit returns the Commit field value if set, zero value otherwise.
func (o *ClusterInfo) GetCommit() string {
	if o == nil || o.Commit == nil {
		var ret string
		return ret
	}
	return *o.Commit
}

// GetCommitOk returns a tuple with the Commit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfo) GetCommitOk() (*string, bool) {
	if o == nil || o.Commit == nil {
		return nil, false
	}
	return o.Commit, true
}

// HasCommit returns a boolean if a field has been set.
func (o *ClusterInfo) HasCommit() bool {
	if o != nil && o.Commit != nil {
		return true
	}

	return false
}

// SetCommit gets a reference to the given string and assigns it to the Commit field.
func (o *ClusterInfo) SetCommit(v string) {
	o.Commit = &v
}

// GetKafkaClusterId returns the KafkaClusterId field value if set, zero value otherwise.
func (o *ClusterInfo) GetKafkaClusterId() string {
	if o == nil || o.KafkaClusterId == nil {
		var ret string
		return ret
	}
	return *o.KafkaClusterId
}

// GetKafkaClusterIdOk returns a tuple with the KafkaClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterInfo) GetKafkaClusterIdOk() (*string, bool) {
	if o == nil || o.KafkaClusterId == nil {
		return nil, false
	}
	return o.KafkaClusterId, true
}

// HasKafkaClusterId returns a boolean if a field has been set.
func (o *ClusterInfo) HasKafkaClusterId() bool {
	if o != nil && o.KafkaClusterId != nil {
		return true
	}

	return false
}

// SetKafkaClusterId gets a reference to the given string and assigns it to the KafkaClusterId field.
func (o *ClusterInfo) SetKafkaClusterId(v string) {
	o.KafkaClusterId = &v
}

func (o ClusterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Commit != nil {
		toSerialize["commit"] = o.Commit
	}
	if o.KafkaClusterId != nil {
		toSerialize["kafka_cluster_id"] = o.KafkaClusterId
	}
	return json.Marshal(toSerialize)
}

type NullableClusterInfo struct {
	value *ClusterInfo
	isSet bool
}

func (v NullableClusterInfo) Get() *ClusterInfo {
	return v.value
}

func (v *NullableClusterInfo) Set(val *ClusterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterInfo(val *ClusterInfo) *NullableClusterInfo {
	return &NullableClusterInfo{value: val, isSet: true}
}

func (v NullableClusterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


