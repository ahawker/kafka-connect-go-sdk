/*
Kafka Connect REST API

Kafka Connect REST API https://docs.confluent.io/platform/current/connect/references/restapi.html

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2002Connector Connector status.
type InlineResponse2002Connector struct {
	// State of the connector.
	State *string `json:"state,omitempty"`
	// ID of the worker running the connector.
	WorkerId *string `json:"worker_id,omitempty"`
}

// NewInlineResponse2002Connector instantiates a new InlineResponse2002Connector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2002Connector() *InlineResponse2002Connector {
	this := InlineResponse2002Connector{}
	return &this
}

// NewInlineResponse2002ConnectorWithDefaults instantiates a new InlineResponse2002Connector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2002ConnectorWithDefaults() *InlineResponse2002Connector {
	this := InlineResponse2002Connector{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *InlineResponse2002Connector) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002Connector) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *InlineResponse2002Connector) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *InlineResponse2002Connector) SetState(v string) {
	o.State = &v
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *InlineResponse2002Connector) GetWorkerId() string {
	if o == nil || o.WorkerId == nil {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2002Connector) GetWorkerIdOk() (*string, bool) {
	if o == nil || o.WorkerId == nil {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *InlineResponse2002Connector) HasWorkerId() bool {
	if o != nil && o.WorkerId != nil {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *InlineResponse2002Connector) SetWorkerId(v string) {
	o.WorkerId = &v
}

func (o InlineResponse2002Connector) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.WorkerId != nil {
		toSerialize["worker_id"] = o.WorkerId
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2002Connector struct {
	value *InlineResponse2002Connector
	isSet bool
}

func (v NullableInlineResponse2002Connector) Get() *InlineResponse2002Connector {
	return v.value
}

func (v *NullableInlineResponse2002Connector) Set(val *InlineResponse2002Connector) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2002Connector) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2002Connector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2002Connector(val *InlineResponse2002Connector) *NullableInlineResponse2002Connector {
	return &NullableInlineResponse2002Connector{value: val, isSet: true}
}

func (v NullableInlineResponse2002Connector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2002Connector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


